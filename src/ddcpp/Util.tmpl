###############################################################################
## Copyright AllSeen Alliance. All rights reserved.
##
## Permission to use, copy, modify, and/or distribute this software for any
## purpose with or without fee is hereby granted, provided that the above
## copyright notice and this permission notice appear in all copies.
##
## THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
## WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
## MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
## ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
## WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
## ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
## OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
###############################################################################

#import GenCPP

## ----------------------------------------------------------------------------
## Generate C++ code for marshaling the given items.
##
## Arguments:
##   items     -- a list of interface properties, method arguments or signal
##                arguments
##   name      -- variable name of the C++ MsgArg array
##   status    -- variable name to be used for storing QStatus
## Keyword arguments:
##   container -- name of the container to be prefixed to the item name
##                (default '')
##
#@staticmethod
#def argarray_marshal($items, $name, $status, $container = '')
    #set $i = 0
    #for $item in $items
        #set arg = $GenCPP.get_arg($item)
        if (ER_OK != (${status} = datadriven::Marshal(${name}[${i}], ${container}${item.name}))) break;
        #set $i = $i + 1
    #end for
#end def

## ----------------------------------------------------------------------------
## Generate C++ code for unmarshaling the given items.
##
## Arguments:
##   items     -- a list of interface properties, method arguments or signal
##                arguments
##   name      -- variable name of the C++ MsgArg array
##   status    -- variable name to be used for storing QStatus
## Keyword arguments:
##   container -- name of the container to be prefixed to the item name
##                (default '')
##
#@staticmethod
#def argarray_unmarshal($items, $name, $status, $container = '')
    #set $i = 0
    #for $item in $items
        #set arg = $GenCPP.get_arg($item)
            if (ER_OK != (${status} = datadriven::Unmarshal(${container}${item.name}, ${name}[${i}]))) break;
        #set $i = $i + 1
    #end for
#end def

## ----------------------------------------------------------------------------
## Generate C++ header code for a method on consumer side.
##
## Arguments:
##   clazz   -- name of the class
##   name    -- name of the method
##   argsin  -- list of method input arguments
##   argsout -- list of method output arguments
## Keyword arguments:
##   reply   -- method with reply or not (default True)
##
#@staticmethod
#def consumer_method_h($clazz, $name, $argsin, $argsout, $reply = True)
    #if $reply
    /**
     * Class containing all output arguments for the ${name} method.
     */
    class ${name}Reply : public datadriven::ConsumerMethodReply {
    public:
        #for $arg in $argsout
        ${GenCPP.cpp_type($arg)} ${arg.name};
        #end for

        /**
         * Unmarshaler for output arguments of ${name} method.
         */
        virtual QStatus Unmarshal(const ajn::MsgArg* _msgarg, size_t _numArgs);
    };

    /**
     * Method for invoking the remote ${name} method.
     */
    std::shared_ptr<datadriven::MethodInvocation<${name}Reply> > ${name}(${GenCPP.args_string($argsin, append='uint32_t _timeout = datadriven::MethodInvocation<' + $name + 'Reply>::DefaultCallTimeout')}) const;
    #else
    /**
     * Method for invoking the remote ${name} method (fire-and-forget).
     */
    QStatus ${name}(${GenCPP.args_string($argsin)}) const;
    #end if
#end def

## ----------------------------------------------------------------------------
## Generate C++ source code for a method on consumer side.
##
## Arguments:
##   clazz   -- name of the class
##   name    -- name of the method
##   argsin  -- list of method input arguments
##   argsout -- list of method output arguments
## Keyword arguments:
##   reply   -- method with reply or not (default True)
##
#@staticmethod
#def consumer_method_cc($clazz, $name, $argsin, $argsout, $reply = True)
    #if $reply
        #set $replyClazz=$clazz + '::' + $name + 'Reply'
        #set $timeout=', _timeout'
QStatus ${replyClazz}::Unmarshal(const ajn::MsgArg* _msgarg, size_t _numArgs)
{
    QStatus _status = ER_OK;

    if (${len(argsout)} != _numArgs) {
        _status = ER_BAD_ARG_COUNT;
    }
        #if $argsout
    else {
        do  {
${Util.argarray_unmarshal($argsout, '_msgarg', '_status')}#slurp
        } while (0);
    }
        #end if
    SetStatus(_status);
    return _status;
}

std::shared_ptr<datadriven::MethodInvocation<${replyClazz}> > ${clazz}::${name}(${GenCPP.args_string($argsin, append='uint32_t _timeout')}) const
    #else
        #set $replyClazz='datadriven::ConsumerMethodNoReply'
        #set $timeout=''
QStatus ${clazz}::${name}(${GenCPP.args_string($argsin)}) const
    #end if
{
    std::shared_ptr<datadriven::MethodInvocation<${replyClazz}> > _inv = datadriven::MethodInvocation<${replyClazz}>::Create();

    #if $argsin
    QStatus _status = ER_OK;

    do  {
        ajn::MsgArg _msgarg[${len($argsin)}];

${Util.argarray_marshal($argsin, '_msgarg', '_status')}#slurp
        _inv->Exec(*this, Type::METHOD_${name.upper()}, _msgarg, ${len($argsin)}${timeout});
    } while (0);
    if (ER_OK != _status) {
        _inv->SetReplyStatus(_status);
    }
    #else

    _inv->Exec(*this, Type::METHOD_${name.upper()}, NULL, 0${timeout});
    #end if
    #if $reply
    return _inv;
    #else
    return _inv->GetReply().GetStatus();
    #end if
}
#end def

## ----------------------------------------------------------------------------
## Generate C++ source code for a signal on consumer side.
##
## Arguments:
##   clazz     -- name of the class
##   name      -- name of the signal
##   args      -- list of signal arguments
## Keyword arguments:
##   container -- name of the container to be prefixed to the argument names
##                (default '')
##
#@staticmethod
#def consumer_signal_cc($clazz, $name, $args, $container = '')
${clazz}::${name}::${name}(const std::shared_ptr<${clazz}>& emitter) :
    datadriven::SignalBase<${clazz}>(emitter)
{
}

int ${clazz}::${name}::GetMemberNumber()
{
    return ${clazz}::Type::SIGNAL_${name.upper()};
}

QStatus ${clazz}::${name}::Unmarshal(ajn::Message& _message)
{
    QStatus _status = ER_OK;
    const ajn::MsgArg* _msgarg;
    size_t _numArgs;

    _message->GetArgs(_numArgs, _msgarg);
    if (${len($args)} != _numArgs) {
        _status = ER_BAD_ARG_COUNT;
    }
    #if $args
    else {
        do  {
${Util.argarray_unmarshal($args, '_msgarg', '_status', container = $container)}#slurp
        } while (0);
    }
    #end if
    return _status;
}
#end def

## ----------------------------------------------------------------------------
## Generate C++ header code for a property on consumer side.
##
## Arguments:
##   clazz     -- name of the class
##   property  -- name of the signal
##
#@staticmethod
#def consumer_property_h($clazz, $property)
    #if $property.is_writeable()
        #set $name = 'Set' + $property.name
        #set $argsin = [$property]
        #set $argsout = []

${Util.consumer_method_h($clazz, $name, $argsin, $argsout)}#slurp
    #end if
    #if $property.is_readable() and $GenCPP.get_property_emits($property) != 'EmitChangesSignal::ALWAYS'
        #set $name = 'Get' + $property.name
        #set $argsin = []
        #set $argsout = [$property]

${Util.consumer_method_h($clazz, $name, $argsin, $argsout)}#slurp
    #end if
#end def

## ----------------------------------------------------------------------------
## Generate C++ source code for a property on consumer side.
##
## Arguments:
##   clazz     -- name of the class
##   property  -- name of the signal
##
#@staticmethod
#def consumer_property_cc($clazz, $property)
    #if $property.is_writeable()
        #set $name = 'Set' + $property.name
        #set $argsin  = [$property]
        #set $argsout = []

QStatus ${clazz}::${name}Reply::Unmarshal(const ajn::MsgArg* _msgarg, size_t _numArgs)
{
    QStatus _status = ER_OK;

    if (0 != _numArgs) {
        _status = ER_BAD_ARG_COUNT;
    }
    SetStatus(_status);
    return _status;
}

std::shared_ptr<datadriven::MethodInvocation<${clazz}::${name}Reply> > ${clazz}::${name}(${GenCPP.args_string($argsin, append='uint32_t _timeout')}) const
{
    std::shared_ptr<datadriven::MethodInvocation<${clazz}::${name}Reply> > _inv = datadriven::MethodInvocation<${clazz}::${name}Reply>::Create();
    QStatus _status = ER_OK;
    ajn::MsgArg _value;

    _status = datadriven::Marshal(_value, ${property.name});
    if (_status == ER_OK) {
        _inv->SetProperty(*this, "${property.name}", _value, _timeout);
    } else {
        _inv->SetReplyStatus(_status);
    }
    return _inv;
}
    #end if
    #if $property.is_readable() and $GenCPP.get_property_emits($property) != 'EmitChangesSignal::ALWAYS'
        #set $name = 'Get' + $property.name
        #set $argsin  = []
        #set $argsout = [$property]

QStatus ${clazz}::${name}Reply::Unmarshal(const ajn::MsgArg* _msgarg, size_t _numArgs)
{
    QStatus _status = ER_OK;

    if (1 != _numArgs) {
        _status = ER_BAD_ARG_COUNT;
    }
    else {
        do  {
${Util.argarray_unmarshal($argsout, '_msgarg', '_status')}#slurp
        } while (0);
    }
    SetStatus(_status);
    return _status;
}

std::shared_ptr<datadriven::MethodInvocation<${clazz}::${name}Reply> > ${clazz}::${name}(${GenCPP.args_string($argsin, append='uint32_t _timeout')}) const
{
    std::shared_ptr<datadriven::MethodInvocation<${clazz}::${name}Reply> > _inv = datadriven::MethodInvocation<${clazz}::${name}Reply>::Create();
    _inv->GetProperty(*this, "${property.name}", _timeout);
    return _inv;
}
    #end if
#end def

