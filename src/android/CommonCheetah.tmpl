###############################################################################
## Copyright (c) 2013-2014 AllSeen Alliance. All rights reserved.
##
## Permission to use, copy, modify, and/or distribute this software for any
## purpose with or without fee is hereby granted, provided that the above
## copyright notice and this permission notice appear in all copies.
##
## THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
## WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
## MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
## ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
## WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
## ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
## OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
###############################################################################
#import GenAndroid
#from .. import argdef
#####################
## Define persistent version of the argument(s) for a particular component.
## See ServiceImplementation.tmpl for more context.
#####################
#@staticmethod
#def define_persistent_component_args($comp, $indent_count, $direction = "in")
    #if $direction == "in"
        #set $args = $comp.input_arg_info.args
    #else
        #assert($direction == "out")
        #set $args = $comp.output_arg_info.args
    #end if
    #set $indent = $indent_count * " "
    #if len($args) > 0
${indent}/* Define the private persistent version of the arg(s) for $comp.name. */
    #end if
    #for $a in $args
        #if $a.is_array()
            #set $array_brackets = "[]"
        #else
            #set $array_brackets = ""
        #end if
        #set $t = $GenAndroid.get_base_java_type($a.interface, $a.arg_type)
        #set $init = $GenAndroid.get_initialization($a, indent_count + 4)
## A persistent string needs a private int, mXXXXHelloNumber_$a.name, to initialize it.
        #if $t == "String"
${indent}private int m${comp.name}HelloNumber_$a.name = 0;
        #end if
${indent}private $t$array_brackets $CommonCheetah.make_persistent_arg_name($a, $comp) $init;
    #end for
#end def
#####################
## Define persistent version of the argument(s) for client runnable code. If $object is None
## do not use the interface and object names as prefixes. This is used by ClientMain,
## ServiceMain, and ServiceImplementation. See those files for more context.
#####################
#@staticmethod
#def define_persistent_client_args($service, $indent_count)
    #if $GenAndroid.service_has_persistent_args($service)
    #set $indent = $indent_count * " "
$indent$GenAndroid.comment_start_runnable
$CommonCheetah.define_persistent_classes($service, "both", $indent_count)#slurp
    #for $o in $service.get_objects()
        #for $i in $o.interfaces
            #for $m in $i.methods
$CommonCheetah.declare_instance_of_persistent_class($o, $i, $m, "in", $indent_count)
            #end for
            #for $p in $i.properties
## Properties are special and need persisent data in both directions.
$CommonCheetah.declare_instance_of_persistent_class($o, $i, $p, "both", $indent_count)
            #end for
## There is no persistent data needed for signals on the client side.
        #end for
    #end for
$indent$GenAndroid.comment_end_runnable
    #end if
#end def
#####################
## Declare the instances of data needed for the persisent version of the
## argument(s) for runnable code.
#####################
#@staticmethod
#def declare_persistent_data($service, $direction, $indent_count)
    #for $o in $service.get_objects()
        #if $GenAndroid.object_needs_persistent_data($o, $direction)
            #for $i in $o.interfaces
$CommonCheetah.declare_interface_persistent_data($o, $i, $direction, $indent_count)#slurp
            #end for
        #end if
    #end for
#end def
#####################
## Declare a specific instance of a class for one interface.
## This is a container for the argument(s) for runnable code.
#####################
#@staticmethod
#def declare_interface_persistent_data($object, $interface, $direction, $indent_count)
    #for $m in $interface.methods
$CommonCheetah.declare_instance_of_persistent_class($object, $interface, $m, $direction, $indent_count)#slurp
    #end for
    #for $p in $interface.properties
$CommonCheetah.declare_instance_of_persistent_class($object, $interface, $p, $direction, $indent_count)#slurp
    #end for
    #for $s in $interface.signals
$CommonCheetah.declare_instance_of_persistent_class($object, $interface, $s, $direction, $indent_count)#slurp
    #end for
#end def
#####################
## Declare a specific instance of a class for one component object.
## This is a container for the argument(s) for runnable code.
#####################
#@staticmethod
#def declare_instance_of_persistent_class($object, $interface, $comp, $direction, $indent_count)
    #set $has_inputs = $comp.input_arg_info and len($comp.input_arg_info.args) > 0
    #set $has_outputs = $comp.output_arg_info and len($comp.output_arg_info.args) > 0
    #if $direction == "both" or ($direction == "in" and $has_inputs) or ($direction == "out" and $has_outputs)
        #set $indent = $indent_count * " "
        #set $comment_name = $CommonCheetah.make_component_comment_name($object, $interface, $comp)
$indent/* Instance data for '$comment_name'. */
        #set $class_name = $CommonCheetah.make_persistent_class_name($interface, $comp)
        #set $instance_name = $CommonCheetah.make_persistent_instance_name($object, $interface, $comp)
${indent}private $class_name $instance_name;
    #end if
#end def
#####################
## Define the classes needed for the persisent version of the argument(s) for
## runnable code. This is used by ClientMain, ServiceMain, and ServiceImplementation.
## See those files for more context.
#####################
#@staticmethod
#def define_persistent_classes($service, $direction, $indent_count)
    #for $key in sorted($service.interfaces):
$CommonCheetah.define_interface_persistent_classes($service.interfaces[$key], $direction, $indent_count)#slurp
    #end for
#end def
#####################
## Declare a specific instance of a class for one interface.
## This is a container for the argument(s) for runnable code.
#####################
#@staticmethod
#def define_interface_persistent_classes($interface, $direction, $indent_count)
    #set $indent = $indent_count * " "
    #if $GenAndroid.interface_needs_persistent_data($interface, $direction)
$indent/* Persistent data class definitions for $interface.interface_full_name. */
        #for $m in $interface.methods
$CommonCheetah.define_persistent_class($interface, $m, $direction, $indent_count)
        #end for
        #for $p in $interface.properties
$CommonCheetah.define_persistent_class($interface, $p, "both", $indent_count)
        #end for
        #if $direction == "out"
            #for $s in $interface.signals
$CommonCheetah.define_persistent_class($interface, $s, $direction, $indent_count)
            #end for
        #end if
    #end if
#end def
#####################
## Define a class to contain the arguments for this component. Direction can be
##  'in' or 'out'. 'comp' can be a method, signal, or property.
#####################
#@staticmethod
#def define_persistent_class($interface, $comp, $direction, $indent_count)
    #set $indent = $indent_count * " "
    #if $direction == "in"
        #set $args = $comp.input_arg_info.args
    #elif $direction == "out"
        #set $args = $comp.output_arg_info.args
    #else
        #assert($direction == "both")
        #set $args = $comp.input_arg_info.args + $comp.output_arg_info.args
    #end if
    #if $args
        #set $class_name = $CommonCheetah.make_persistent_class_name($interface, $comp)
${indent}private class $class_name {
        #for $a in $args
            #if $a.is_array()
                #set $array_brackets = "[]"
            #else
                #set $array_brackets = ""
            #end if
            #set $t = $GenAndroid.get_base_java_type($a.interface, $a.arg_type)
            #set $init = $GenAndroid.get_initialization($a, indent_count + 4)
## A persistent string needs a private int, HelloNumber_$a.name, to initialize it.
            #if $t == "String"
${indent}    int HelloNumber_$a.name = 0;
            #end if
${indent}    $t$array_brackets $a.name$init;
        #end for
${indent}}
    #end if
#end def
#####################
## Make a collision free class name from these component.
## 'comp' can be a method, signal, or property.
#####################
#@staticmethod
#def make_persistent_class_name($interface, $comp)
    #return "{0}_{1}_Args".format($interface.get_full_coded_name(), $comp.name)
#end def
#####################
## Make a collision free instance name from these component.
## 'comp' can be a method, signal, or property.
#####################
#@staticmethod
#def make_persistent_instance_name($object, $interface, $comp)
    #set $class_name = $CommonCheetah.make_persistent_class_name($interface, $comp)
    #if $object
        #return "m{0}_{1}".format($object.get_full_coded_name(True), $class_name)
    #else
        #return "m{0}".format($class_name)
    #end if
#end def
#####################
## "Increment" all these arguments for the "runnable" version of the program.
#####################
#@staticmethod
#def increment_args($object, $interface, $comp, $args, $indent_count)
    #for $a in $args
$CommonCheetah.increment_arg($object, $interface, $comp, $a, $indent_count)#slurp
    #end for
#end def
#####################
## "Increment" this argument for the "runnable" version of the program.
#####################
#@staticmethod
#def increment_arg($object, $interface, $comp, $arg, $indent_count)
## TODO: Handle arrays and structures similar to how it is done in TC version.
    #if $arg.is_array()
        #set $element0 = "[0]"
    #else
        #set $element0 = ""
    #end if
$CommonCheetah.increment_object($element0, $object, $interface, $comp, $arg, $indent_count)#slurp
#end def
#####################
## "Increment" this one "incrementable" argument object.
#####################
#@staticmethod
#def increment_object($element0, $object, $interface, $comp, $arg, $indent_count)
    #set $sig = $arg.get_base_signature()
    #set $indent = $indent_count * " "
    #set $instance_name = $CommonCheetah.make_persistent_instance_name($object, $interface, $comp)
    #set $arg_name = "{0}.{1}".format($instance_name, $arg.name)
    #if $sig == 'd'
${indent}$arg_name$element0 += 0.1;
    #elif $sig == 'v'
${indent}${arg_name}_int$element0++;
    #elif $sig == 'b'
${indent}$arg_name$element0 = !${arg_name}$element0;
## Arrays of strings are handled differently.
    #elif $sig in ('s', 'o', 'g') and not $arg.is_array
        #set $comment_name = $CommonCheetah.make_component_comment_name($object, $interface, $comp)
        #if $sig == 'o'
${indent}$arg_name = String.format("%s %d", '$comment_name', ++${instance_name}HelloNumber_$arg.name);
        #elif $sig == 'g'
${indent}$arg_name = String.format("(sig%c)", 's' + (++${instance_name}HelloNumber_$arg.name % 3));
        #else
${indent}$arg_name = String.format("Hello # %d from '$comment_name'.\n", ++${instance_name}HelloNumber_$arg.name);
        #end if
    #else
        #if $arg.is_array
            #if $sig not in ('s', 'o', 'g')
${indent}${arg_name}$element0++;
            #end if
        #else
${indent}${arg_name}$element0++;
        #end if
    #end if
#end def
#####################
## Add the arguments, without types, to a method call, signal, or property.
#####################
#@staticmethod
#def add_args($args, $name, $prefix = "", $direction = "in")
    #set $comma_space = ""
    #for $a in $args
        #if $a.direction == $direction
${comma_space}$prefix${name}.$a.name#slurp
            #set $comma_space = ", "
        #end if
    #end for
#end def
#####################
## Make the name for the persistent data to be used for this argument.
## It is a combination of the the component (method/property/signal).
#####################
#@staticmethod
#def make_persistent_arg_name($arg, $comp)
    #set $return_value = "m{0}_{1}".format($comp.name, $arg.name)
    #return $return_value
#end def
#####################
## Make a user friendly name to identify a specific instance of a component
## (method, signal, or property).
#####################
#@staticmethod
#def make_component_comment_name($object, $interface, $component)
    #if $object
        #return "{0}/{1}::{2}()".format($object.get_full_name(), $interface.interface_full_name, $component.name)
    #else
        #return "{0}::{1}()".format($interface.interface_full_name, $component.name)
    #end if
#end def
