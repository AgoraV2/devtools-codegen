###############################################################################
## Copyright (c) 2014 AllSeen Alliance. All rights reserved.
##
## Permission to use, copy, modify, and/or distribute this software for any
## purpose with or without fee is hereby granted, provided that the above
## copyright notice and this permission notice appear in all copies.
##
## THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
## WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
## MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
## ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
## WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
## ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
## OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
###############################################################################
/* Source: "$command_line.xml_input_file" */
#import GenAndroid
#import CommonCheetah as cc
#from .. import common

package $interface.get_path();

import org.alljoyn.bus.BusException;
import org.alljoyn.bus.annotation.BusInterface;
#if len($interface.methods) > 0
import org.alljoyn.bus.annotation.BusMethod;
#end if
#if len($interface.properties) > 0
import org.alljoyn.bus.annotation.BusProperty;
#end if
#if len($interface.signals) > 0
import org.alljoyn.bus.annotation.BusSignal;
#end if

/*
 * The BusInterface annotation is used to tell the code that this interface is an AllJoyn
 * interface.
 *
 * The 'name' value is used to specify by which name this interface will be known.  If the name is
 * not given the fully qualified name of the Java interface is be used.  In most instances its best
 * to assign an interface name since it helps promote code reuse.
 */
@BusInterface(name = "$interface.interface_full_name")
public interface $interface.interface_name {
    #if len($interface.methods) > 0

    /*
     * The BusMethod annotation signifies that this function should be used as part of the AllJoyn
     * interface.  The runtime is smart enough to figure out what the input and output of the
     * method is based on the input/output arguments of the method.
     *
     * All methods that use the BusMethod annotation can throw a BusException and should indicate
     * this fact.
     */
        #for $m in $interface.methods
            #set $arg_info = $m.input_arg_info
    @BusMethod (name = "$m.name")
    $GenAndroid.get_java_return_type(m) $common.make_camel_case($m.name, None)($arg_info.arg_declaration) throws BusException;
        #end for
    #end if
    #if len($interface.properties) > 0

    /*
     * The BusProperty annotation signifies that this property should be used as part of the
     * AllJoyn interface. The runtime is smart enough to figure out what the input and output of
     * the property is based on the input/output arguments of the property.
     *
     * All properties that use the BusProperty annotation can throw a BusException and should
     * indicate this fact.
     */
        #for $p in $interface.properties
            #set $arg_info = $p.input_arg_info
            #if $p.is_writeable()
    @BusProperty
    void set${p.name}($arg_info.arg_declaration) throws BusException;
            #end if
            #if $p.is_readable()
    @BusProperty
    $GenAndroid.get_java_return_type(p) get${p.name}() throws BusException;
            #end if
        #end for
    #end if
    #if len($interface.signals) > 0

    /*
     * The BusSignal annotation signifies that this signal should be used as part of the
     * AllJoyn interface.
     *
     * All signals that use the BusSignal annotation can throw a BusException and should
     * indicate this fact.
     */
        #for s in $interface.signals
            #set $arg_info = $s.output_arg_info
    @BusSignal (name = "$s.name")
    void $common.make_camel_case($s.name, None)($arg_info.arg_declaration) throws BusException;
        #end for
    #end if
}
